// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// SQLite doesn't support enums, using strings instead
// Role: ADMIN, FINANCE, OPS
// DataSource: CSV_UPLOAD, JIRA_API, NOTION_API, AWS_BILLING, MANUAL_ENTRY  
// MetricType: COST, PRODUCTIVITY, EFFICIENCY, UTILIZATION

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String? // Hashed password for credentials provider
  role          String          @default("OPS")
  isActive      Boolean         @default(true)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  lastLoginAt   DateTime?
  
  accounts      Account[]
  sessions      Session[]
  uploadedData  UploadedData[]
  
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UploadedData {
  id          String     @id @default(cuid())
  fileName    String
  originalName String
  fileSize    Int
  mimeType    String
  dataSource  String
  category    String // e.g., "billing", "hr", "productivity", "cloud-costs"
  uploadedBy  String
  uploadedAt  DateTime   @default(now())
  processedAt DateTime?
  isProcessed Boolean    @default(false)
  metadata    String?    // JSON string for SQLite compatibility
  errorLog    String? // Store processing errors
  
  user        User       @relation(fields: [uploadedBy], references: [id])
  dataRecords DataRecord[]
  
  @@map("uploaded_data")
}

model DataRecord {
  id             String       @id @default(cuid())
  uploadId       String
  recordIndex    Int // Position in the original file
  rawData        String       // JSON string for SQLite compatibility
  processedData  String       // JSON string for SQLite compatibility
  amount         Float?       // For financial records
  date           DateTime?    // Transaction/record date
  category       String?
  description    String?
  tags           String       // Comma-separated tags for SQLite compatibility
  createdAt      DateTime     @default(now())
  
  upload         UploadedData @relation(fields: [uploadId], references: [id], onDelete: Cascade)
  
  @@map("data_records")
}

model Metric {
  id          String     @id @default(cuid())
  name        String
  type        String
  value       Float
  unit        String? // e.g., "USD", "hours", "percent"
  period      String     // e.g., "2023-12", "Q4-2023", "2023"
  category    String?    // e.g., "cloud-costs", "productivity"
  subcategory String?    // e.g., "aws-ec2", "jira-tasks"
  metadata    String?    // JSON string for SQLite compatibility
  calculatedAt DateTime  @default(now())
  
  @@unique([name, type, period, category])
  @@map("metrics")
}

model Recommendation {
  id               String       @id @default(cuid())
  title            String
  description      String
  category         String       // e.g., "cost-optimization", "productivity"
  priority         String       // e.g., "high", "medium", "low"
  potentialSavings Float?
  estimatedEffort  String?      // e.g., "1 hour", "1 day", "1 week"
  actionItems      String       // JSON array as string for SQLite compatibility
  isImplemented    Boolean      @default(false)
  implementedAt    DateTime?
  validFrom        DateTime     @default(now())
  validUntil       DateTime?
  metadata         String?      // JSON string for SQLite compatibility
  analysisRunId    String?      // Link to the analysis run that generated this
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  
  analysisRun      AnalysisRun? @relation("AnalysisRecommendations", fields: [analysisRunId], references: [id])
  
  @@map("recommendations")
}

model Integration {
  id          String   @id @default(cuid())
  name        String   @unique // e.g., "jira", "notion", "aws-billing"
  displayName String   // Human-readable name
  isEnabled   Boolean  @default(false)
  config      String?  // JSON string for SQLite compatibility
  lastSyncAt  DateTime?
  nextSyncAt  DateTime?
  syncFrequency String? // e.g., "daily", "weekly", "manual"
  errorLog    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("integrations")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String   // e.g., "login", "upload", "view_data", "export"
  resource  String?  // e.g., "user", "data", "recommendation"
  resourceId String?
  metadata  String?  // JSON string for SQLite compatibility
  ipAddress String?
  userAgent String?
  timestamp DateTime @default(now())
  
  @@map("audit_logs")
}

model AiProvider {
  id          String   @id @default(cuid())
  name        String   @unique // e.g., "openai", "claude", "gemini", "wellspend"
  displayName String   // e.g., "OpenAI GPT-4", "Claude 3", "Google Gemini"
  isEnabled   Boolean  @default(false)
  apiKey      String?  // Encrypted API key
  baseUrl     String?  // Custom API endpoint
  config      String?  // JSON string for provider-specific settings
  usageLimit  Float?   // Monthly usage limit in USD
  currentUsage Float   @default(0) // Current month usage
  lastUsedAt  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  analysisRuns AnalysisRun[]
  
  @@map("ai_providers")
}

model AnalyticsTechnique {
  id          String   @id @default(cuid())
  name        String   @unique // e.g., "cost_anomaly_detection", "predictive_trends"
  displayName String   // e.g., "Cost Anomaly Detection"
  description String
  category    String   // e.g., "cost", "productivity", "efficiency"
  isEnabled   Boolean  @default(false)
  config      String?  // JSON string for technique-specific settings
  priority    Int      @default(5) // 1-10 priority for execution
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  analysisRuns AnalysisRun[]
  
  @@map("analytics_techniques")
}

model AnalysisRun {
  id            String             @id @default(cuid())
  techniqueId   String
  aiProviderId  String?
  status        String             @default("pending") // pending, running, completed, failed
  inputData     String             // JSON string with input parameters
  results       String?            // JSON string with analysis results
  insights      String?            // AI-generated insights
  confidence    Float?             // Confidence score 0-1
  executionTime Int?               // Execution time in milliseconds
  errorMessage  String?
  createdAt     DateTime           @default(now())
  completedAt   DateTime?
  
  technique     AnalyticsTechnique @relation(fields: [techniqueId], references: [id])
  aiProvider    AiProvider?        @relation(fields: [aiProviderId], references: [id])
  recommendations Recommendation[] @relation("AnalysisRecommendations")
  
  @@map("analysis_runs")
}

model DashboardWidget {
  id          String   @id @default(cuid())
  name        String   @unique // e.g., "total_costs", "productivity_score"
  displayName String   // e.g., "Total Monthly Costs"
  type        String   // e.g., "metric", "chart", "table"
  position    Int      // Display order
  size        String   @default("md") // sm, md, lg, xl
  isVisible   Boolean  @default(true)
  config      String?  // JSON string for widget-specific settings
  dataQuery   String?  // SQL or aggregation query
  refreshRate Int      @default(300) // Refresh interval in seconds
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("dashboard_widgets")
}

model Alert {
  id          String   @id @default(cuid())
  name        String
  description String
  type        String   // e.g., "threshold", "anomaly", "trend"
  severity    String   // e.g., "low", "medium", "high", "critical"
  isActive    Boolean  @default(true)
  conditions  String   // JSON string with alert conditions
  lastTriggered DateTime?
  triggerCount Int     @default(0)
  notificationChannels String? // JSON array of notification methods
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("alerts")
} 